#!/usr/bin/env python2.7
import sys, h5py, argparse, os.path as osp
from pbcore.io import readFofn

VALID_CHEMISTRIES = [ "C2", "P4-C2", "P5-C3", "unknown" ]


def movieName(fname):
    bn = osp.basename(fname)
    #m = re.match("(.*)\..\.bax\.h5", bn)
    return bn.split(".")[0]

def setChem(chem, fname):
    if fname.endswith(".fofn"):
        for fn in readFofn(fname):
            setChem(chem, fn)

    elif fname.endswith(".bax.h5") or fname.endswith(".bas.h5"):
        print >> sys.stderr, "** Warning: bas/bax chemistry info not used until 2.2; consider updating metadata.xml instead **"
        f = h5py.File(fname)
        ri = f["/ScanData/RunInfo"]
        try:
            ri.attrs["SequencingChemistry"] = chem
        except:
            print fname, "could not set chem!"
    else:
        assert fname.endswith(".cmp.h5")
        f = h5py.File(fname)
        if f.get("MovieInfo/SequencingChemistry") is not None:
            del f["MovieInfo/SequencingChemistry"]
        f["/MovieInfo/SequencingChemistry"] = [chem]*len(f["/MovieInfo/Name"])

def showChem(fname):
    if fname.endswith(".fofn"):
        for fn in readFofn(fname):
            showChem(fn)
    elif fname.endswith(".bax.h5") or fname.endswith(".bas.h5"):
        f = h5py.File(fname, "r")
        ri = f["/ScanData/RunInfo"]
        try:
            chem = ri.attrs["SequencingChemistry"]
            print movieName(fname), chem
        except:
            print movieName(fname), "absent"
    else:
        assert fname.endswith(".cmp.h5")
        f = h5py.File(fname, "r")
        movieNames = f["/MovieInfo/Name"]
        try:
            seqChems = f["/MovieInfo/SequencingChemistry"]
            for (mn, chemistry) in zip(movieNames, seqChems):
                print mn, chemistry
        except:
            for mn in movieNames:
                print mn, "absent"

def setHandler(args):
    for fname in args.fnames:
        setChem(args.chemistry, fname)

def showHandler(args):
    for fname in args.fnames:
        showChem(fname)

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    set_parser = subparsers.add_parser("set", help="Set chemistry")
    set_parser.add_argument("chemistry", choices=VALID_CHEMISTRIES)
    set_parser.add_argument("fnames", nargs="+")
    set_parser.set_defaults(func=setHandler)

    show_parser = subparsers.add_parser("show", help="Show chemistry")
    show_parser.add_argument("fnames", nargs="+")
    show_parser.set_defaults(func=showHandler)

    args = parser.parse_args()
    args.func(args)



if __name__ == '__main__':
    main()
