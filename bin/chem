#!/usr/bin/env python2.7
import sys, h5py, argparse, os.path as osp, os
import pysam
from pbcore.io import *
from pbcore.chemistry import ChemistryLookupError

CHEMISTRY_OVERRIDE_TRIPLES = \
 { # RS
   "C2"      : ("001672551", "001558034", "2.1"),
   "P4-C2"   : ("100236500", "001558034", "2.1"),
   "P5-C3"   : ("100256000", "100254800", "2.1"),
   "P6-C4"   : ("100356300", "100356200", "2.1"),

   # Sequel
   "S/P1-C1/beta" : ("100-619-300", "100-620-000", "3.0"),
   "S/P1-C1.1" :    ("100-619-300", "100-867-300", "3.1"),
   "S/P1-C1.2" :    ("100-619-300", "100-902-100", "3.1"),

   "unknown" : ("","","") }

VALID_CHEMISTRIES = CHEMISTRY_OVERRIDE_TRIPLES.keys()

def movieName(fname):
    bn = osp.basename(fname)
    #m = re.match("(.*)\..\.bax\.h5", bn)
    return bn.split(".")[0]

def safeDel(f, key):
    if key in f:
        del f[key]

def setChem(chem, fname):
    bk, sk, swVers = CHEMISTRY_OVERRIDE_TRIPLES[chem]

    if fname.endswith(".fofn"):
        for fn in readFofn(fname):
            setChem(chem, fn)

    elif (fname.endswith(".bax.h5") or
          fname.endswith(".bas.h5") or
          fname.endswith(".bas.h5")):

        f = h5py.File(fname)

        # Recurse if multipart
        if "MultiPart" in f:
            partNames = [ osp.join(osp.dirname(fname), p)
                          for p in f["/MultiPart/Parts"] ]
            for part in partNames:
                setChem(chem, part)
        else:
            try:
                safeDel(f["/ScanData/RunInfo"].attrs, "SequencingChemistry")
                f["/ScanData/RunInfo"].attrs["BindingKit"] = bk
                f["/ScanData/RunInfo"].attrs["SequencingKit"] = sk
                f["/PulseData/BaseCalls"].attrs["ChangeListID"] = swVers
            except:
                print fname, "could not set chem!"
    elif fname.endswith(".bam"):
        with pysam.AlignmentFile(fname, "rb", check_sq=False) as bam_in:
            header = dict(bam_in.header)
            header_ds = header["RG"][0]['DS']
            header_fields = header_ds.split(";")
            header_tmp = []
            overrides = {
                "SEQUENCINGKIT": sk,
                "BINDINGKIT": bk,
                "BASECALLERVERSION": swVers
            }
            for field in header_fields:
                key,value = field.split("=")
                header_tmp.append((key, overrides.get(key, value)))
            header_ds_new = ";".join(["=".join([k,v]) for (k,v) in header_tmp])
            if header_ds_new == header_ds:
                print "chemistry already set, skipping"
                return False
            header["RG"][0]['DS'] = header_ds_new
            bam_new = fname + ".new"
            with pysam.AlignmentFile(bam_new, "wb", header=header) as bam_out:
                for rec in bam_in:
                    bam_out.write(rec)
            bam_saved = fname + ".old"
            print "mv {f} {b}".format(f=fname, b=bam_saved)
            os.rename(fname, bam_saved)
            print "mv {f} {b}".format(f=bam_new, b=fname)
            os.rename(bam_new, fname)
    else:
        assert fname.endswith(".cmp.h5")
        f = h5py.File(fname)
        n = len(f["/MovieInfo/Name"])
        safeDel(f["/MovieInfo"], "SequencingKit")
        safeDel(f["/MovieInfo"], "BindingKit")
        safeDel(f["/MovieInfo"], "SoftwareVersion")
        safeDel(f["/MovieInfo"], "SequencingChemistry")
        f["/MovieInfo/BindingKit"] = [bk] * n
        f["/MovieInfo/SequencingKit"] = [sk] * n
        f["/MovieInfo/SoftwareVersion"] = [swVers] * n

def showChem(fname):
    if fname.endswith(".fofn"):
        for fn in readFofn(fname):
            showChem(fn)
    elif (fname.endswith(".bax.h5") or
          fname.endswith(".bas.h5") or
          fname.endswith(".ccs.h5")):
        b = BasH5Reader(fname)
        try:
            chem = b.sequencingChemistry
        except ChemistryLookupError:
            chem = "absent"
        print fname, chem
    else:
        print fname
        assert fname.endswith(".cmp.h5") or fname.endswith(".bam")
        c = openAlignmentFile(fname)
        names = c.readGroupTable.MovieName
        chems = c.readGroupTable.SequencingChemistry
        for name, chem  in zip(names, chems):
            print "    ", name, chem

def setHandler(args):
    for fname in args.fnames:
        setChem(args.chemistry, fname)

def showHandler(args):
    for fname in args.fnames:
        showChem(fname)

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    set_parser = subparsers.add_parser("set", help="Set chemistry")
    set_parser.add_argument("chemistry", choices=VALID_CHEMISTRIES)
    set_parser.add_argument("fnames", nargs="+")
    set_parser.set_defaults(func=setHandler)

    show_parser = subparsers.add_parser("show", help="Show chemistry")
    show_parser.add_argument("fnames", nargs="+")
    show_parser.set_defaults(func=showHandler)

    args = parser.parse_args()
    args.func(args)



if __name__ == '__main__':
    main()
